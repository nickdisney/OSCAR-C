OSCAR-C Project Documentation: Bayesian Network Utilities (utils/bayesian_utils.py)
1. Purpose and Role in OSCAR-C
The utils/bayesian_utils.py script provides a collection of helper functions essential for the operation of the Causal Bayesian Network (CBN) within OSCAR-C's PredictiveWorldModel (PWM). Its primary responsibilities include:
Feature Extraction: Transforming raw agent state information (action details, contextual factors like P/H/P levels and ConsciousState, and pre-action world state predicates) into a flat, discretized feature set suitable for input to the CBN.
Variable Discretization: Converting continuous numerical values (e.g., Pain level, Curiosity drive) into predefined categorical states for use in the categorical CBN.
Utility Calculations (Conceptual): Placeholder for functions like calculating conditional entropy from CPD tables, although the primary reliance is on pgmpy's built-in methods for such computations.
These utilities are crucial for bridging the gap between the rich, varied data generated by OSCAR-C's cognitive cycle and the structured, categorical input required by the pgmpy library for CBN learning and inference.
2. Functional Overview and Implementation
The script contains several functions focused on data preparation and feature engineering for the CBN.
2.1. Core Feature Extraction (extract_features_for_cbn)
extract_features_for_cbn(action_dict, context_dict, pre_state_predicates):
Purpose: This is the main orchestrator for feature extraction. It takes the action_dict (describing the action performed or being considered), the context_dict (containing current agent state like P/H/P, ConsciousState, drive levels, active goal details), and a set of pre_state_predicates (representing the world state before the action) as input.
Process:
Extracts the core ActionTypeNode directly from action_dict.
Calls _extract_general_context_features to derive categorical features for Context_PainLevel, Context_HappinessLevel, Context_PurposeLevel, Context_ConsciousState, and Context_CuriosityDrive by discretizing their numerical values from context_dict.
Dispatches to action-type specific helper functions (_extract_file_operation_features, _extract_llm_operation_features, _extract_system_operation_features) based on the action_dict["type"] to generate relevant ActionParam_* features (e.g., ActionParam_PathType, ActionParam_PromptLength) and PreState_* features (e.g., PreState_FileExists_Target). It also extracts Context_LLM_TaskType for LLM actions.
Ensures that all CBN nodes defined in pwm_cbn_config.json (specifically parameter and pre-state nodes) have a default value (e.g., "NotApplicable") in the feature set if not explicitly derived.
Converts all feature values to strings.
Output: Returns a flat dictionary where keys are CBN node names (as defined in pwm_cbn_config.json) and values are their corresponding discretized string states.
2.2. Action-Specific Feature Extractors
_extract_file_operation_features(action_params, pre_state_predicates, context_dict):
Derives ActionParam_PathType (e.g., "sandboxed", "critical_system") based on the target path in action_params.
Determines PreState_FileExists_Target ("True_File", "True_Directory", "False") by checking pre_state_predicates.
Determines PreState_FilePermissions_Target ("Writable", "ReadOnly_Or_Unknown", "Unknown") based on predicates in pre_state_predicates (if the KnowledgeBase stores such permission information; otherwise, defaults to "Unknown").
_extract_llm_operation_features(action_params, context_dict):
Derives ActionParam_PromptLength ("short", "medium", "long") based on the length of the LLM prompt text.
Infers Context_LLM_TaskType (e.g., "Summarization", "QuestionAnswering", "CodeGeneration") by performing keyword analysis on the prompt text and the active goal description (from context_dict).
_extract_system_operation_features(action_params, pre_state_predicates, context_dict):
For EXECUTE_COMMAND actions, categorizes the command into ActionParam_CommandCategory (e.g., "Deletion", "FileManipulation", "Creation") based on keywords in the command string.
2.3. General Context Feature Extractor
_extract_general_context_features(context_dict):
Takes the context_dict (containing P/H/P levels, ConsciousState name, drive values).
Uses the discretize_variable function to convert numerical P/H/P levels and Curiosity drive level into categories (e.g., "low_pain", "medium_happy", "high_drive").
Maps the ConsciousState name (e.g., "META_CONSCIOUS", "CONSCIOUS") to broader activity categories (e.g., "HighActivity", "NormalActivity").
Handles cases where values might be missing or unparseable by defaulting to "unknown_*" categories.
2.4. Discretization Utility
discretize_variable(value, bins):
A general-purpose function that takes a continuous numerical value and a list of bins.
Each bin is defined as a tuple (min_val, max_val, category_name). min_val or max_val can be None to represent open-ended intervals (e.g., (-infinity, 2.0) or (6.0, +infinity)).
The function returns the category_name of the bin into which the value falls. Intervals are typically inclusive of min_val and exclusive of max_val, with special handling for the last bin if max_val is None.
If the value does not fall into any defined bin, it returns a default "outside_bins" string and logs a warning.
2.5. Entropy Calculation (Placeholder)
calculate_cpd_entropy(cpd_table, variable, parents):
This function is intended as a placeholder for calculating conditional entropy from a Conditional Probability Distribution (CPD) table.
The actual entropy calculation for the PWM's CBN is expected to leverage pgmpy's built-in methods for TabularCPD objects (e.g., cpd_object.entropy()) as they are more robust and integrated with the library's data structures.
3. Relationship to Overall Project & Logic Flow
The bayesian_utils.py module is a critical support library for the PredictiveWorldModel (PWM):
PWM Data Preparation:
When the PWM's predict_next_state method is called (during the planning phase or early cycle prediction), it uses extract_features_for_cbn to convert the current agent context and the action under consideration into evidence for querying the CBN.
When the PWM's update_model method is called (after an action has executed), it uses extract_features_for_cbn to process the pre-action state, the executed action, the post-action context, and the observed outcome into a complete data record. This record is then added to the learning_data_buffer used to re-estimate the CBN's CPDs.
Dependency on Data Structures: The feature extraction process relies on the structure of Predicate objects (for pre_state_predicates) and the content of dictionaries passed as action_dict and context_dict.
Configuration (pwm_cbn_config.json): The output feature names generated by these utilities must correspond to the node names defined in the CBN's configuration file.
These utilities are essential for translating the dynamic, often complex, state of the OSCAR-C agent into the discrete, categorical format required for learning and inference with its Causal Bayesian Network, thereby enabling more sophisticated predictive capabilities.