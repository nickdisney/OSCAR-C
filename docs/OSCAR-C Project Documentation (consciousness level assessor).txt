OSCAR-C Project Documentation: cognitive_modules/consciousness_level_assessor.py
File Path: cognitive_modules/consciousness_level_assessor.py
Purpose and Role:
The ConsciousnessLevelAssessor (CLA) component is responsible for evaluating the agent's current cognitive state, primarily based on the characteristics of the PhenomenalState (generated by ExperienceStream) and the workspace_content (from GlobalWorkspaceManager). Its key output is the agent's current ConsciousState (an enum: UNCONSCIOUS, PRE_CONSCIOUS, CONSCIOUS, META_CONSCIOUS, REFLECTIVE) and a phi_proxy_score. This score is a heuristic proxy inspired by Integrated Information Theory (IIT), designed to quantify the "richness" or "level" of conscious processing.
Theoretical Basis / Cognitive Inspiration:
Integrated Information Theory (IIT): This component is the primary locus for operationalizing IIT-inspired metrics within OSCAR-C (Tononi, 2004; Oizumi, Albantakis, & Tononi, 2014). While not calculating the full, computationally intractable Φ, it computes a phi_proxy_score based on:
Differentiation: The richness and diversity of information. Proxied by distinct_source_count (how many different cognitive modules/channels contributed) and content_diversity_lexical (lexical variety of content) from PhenomenalState.
Integration: The interconnectedness or unity of information. Proxied by shared_concept_count_gw (how many concepts/keywords are shared across items in the Global Workspace) from PhenomenalState.
Levels of Consciousness: The concept of graded consciousness, rather than a simple on/off state, is supported by various cognitive theories. For example, Dehaene et al. (2017) propose C0 (subliminal processing), C1 (global availability/conscious access), and C2 (meta-cognitive self-monitoring) levels. The CLA's output ConsciousState enum reflects such a graded model.
Self-Awareness / Meta-cognition: The specific check _has_self_reference for elevating the state to META_CONSCIOUS aligns with higher-order theories of consciousness, which posit that meta-consciousness involves the mind representing its own states or itself (Rosenthal, 2005; Flavell, 1979).
Implementation Details:
Inheritance:
class ConsciousnessLevelAssessor(ConsciousnessAssessor):
Implements the ConsciousnessAssessor protocol (and by extension, CognitiveComponent).
Configuration: Loaded during initialize from the consciousness_assessor section of config.toml.
Thresholds for phi_proxy_score: meta_conscious_threshold, conscious_threshold, pre_conscious_threshold, unconscious_threshold.
Weights for Differentiation Score: diff_weight_sources, diff_weight_lexical.
Weights for Integration Score: int_weight_shared_concepts.
Weights for combining differentiation and integration into phi_proxy_score: phi_contrib_diff, phi_contrib_int.
global_workspace_capacity_for_norm: Used to normalize distinct_source_count.
State Variables:
Stores the loaded thresholds and weights.
last_assessed_level_name: str: Name of the last assessed ConsciousState.
last_phi_proxy_score: float: The most recently calculated phi_proxy_score.
References to _PhenomenalStateClass and _ConsciousStateEnum obtained via globals().get().
Key Methods:
async def initialize(self, config: Dict[str, Any], controller: Any) -> bool;
Loads all configuration parameters (thresholds and weights for Φ-Proxy calculation).
Validates that the loaded consciousness thresholds are in a logical ascending order and within the 0-1 range; otherwise, resets to defaults.
Logs initialized parameters.
def _has_self_reference(self, experience_content: Dict[str, Any], workspace_content: Dict[str, Any]) -> bool;
Checks for the presence of self-referential keywords (e.g., "self", "my", "agent", "consciousness", "oscar") within the string content of items in experience_content and workspace_content. Also checks if any keys in workspace_content are self-referential.
Used to determine if the agent can be elevated to META_CONSCIOUS if its phi_proxy_score is high enough.
async def assess_consciousness_level(self, experience: Optional[Any], workspace_content: Dict[str, Any]) -> 'ConsciousState';
This is the core assessment logic.
Input Handling: Checks if experience is valid (either a PhenomenalState object or a dictionary with expected fields). If not, defaults to UNCONSCIOUS.
Sub-metric Extraction: Extracts distinct_source_count, content_diversity_lexical, and shared_concept_count_gw from the experience object/dictionary.
Normalization: Normalizes distinct_source_count using self.gw_capacity_for_norm. content_diversity_lexical and shared_concept_count_gw are assumed to be already normalized (0-1) by ExperienceStream.
Differentiation Score Calculation:
differentiation_score = ((self.diff_weight_sources * norm_source_count) + (self.diff_weight_lexical * lexical_diversity)) / (sum_of_diff_weights)
Clamped to [0, 1].
Integration Score Calculation:
integration_score = (self.int_weight_shared_concepts * shared_concepts)
Clamped to [0, 1].
Composite Φ-Proxy Score Calculation:
phi_proxy_score = (differentiation_score ** self.phi_contrib_diff) * (integration_score ** self.phi_contrib_int)
This multiplicative approach emphasizes that both high differentiation AND high integration are needed for a high score. The powers allow tuning the sensitivity to each component.
Clamped to [0, 1].
ConsciousState Determination:
Compares the phi_proxy_score against the configured thresholds (self.meta_conscious_threshold, self.conscious_threshold, etc.) in descending order.
If phi_proxy_score meets meta_conscious_threshold, it then calls _has_self_reference. If true, state is META_CONSCIOUS; otherwise, it's capped at CONSCIOUS.
Updates self.last_assessed_level_name and self.last_phi_proxy_score.
Returns the determined ConsciousState enum member.
async def process(self, input_state: Optional[Dict[str, Any]] = None) -> Optional[Dict[str, Any]];
The main entry point called by AgentController.
Extracts experience and workspace_content from input_state.
Performs basic type validation on inputs.
Calls self.assess_consciousness_level.
Returns {"conscious_state": conscious_state_enum_member, "phi_proxy_score": self.last_phi_proxy_score}.
async def reset(self) -> None;
Resets last_assessed_level_name and last_phi_proxy_score.
async def get_status(self) -> Dict[str, Any];
Returns current status, including last assessed level, last score, and configured thresholds/weights.
Algorithms Used:
Weighted Sum & Product for Scoring: The calculation of differentiation_score, integration_score, and the final phi_proxy_score involves weighted sums and a weighted product (using powers as contributions).
Thresholding: The final ConsciousState is determined by comparing the phi_proxy_score against a series of predefined thresholds.
Keyword Matching: Used in _has_self_reference for basic self-reference detection.
Relationship to Overall Project & Logic Flow:
The ConsciousnessLevelAssessor is Step 5 in the AgentController's 12-step cognitive cycle.
Inputs (from AgentController):
experience: PhenomenalState (or dict): The integrated experience object/dict from ExperienceStream, containing the crucial Φ-Proxy sub-metrics (distinct_source_count, content_diversity_lexical, shared_concept_count_gw).
workspace_content: Dict[str, Any]: The content of the global workspace from GlobalWorkspaceManager.
Output (to AgentController):
{"conscious_state": ConsciousState_enum_member, "phi_proxy_score": float}: The assessed level of consciousness and the calculated proxy score.
Downstream Consumers / Influence:
AgentController: Stores the assessed self.consciousness_level. This state can then be used by the controller to:
Modulate the behavior of other components (e.g., providing this level as context to MetaCognitiveMonitor, HTNPlanner, EmergentMotivationSystem, NarrativeConstructor).
Influence its own decision-making (e.g., depth of planning, types of goals pursued).
MetaCognitiveMonitor (Step 6): May use the consciousness_level as part of the cognitive_state it analyzes (e.g., to detect persistently low consciousness).
NarrativeConstructor (Step 11): May use the consciousness_level to influence the tone or content of narrative entries.
EmergentMotivationSystem (Step 10): May use the consciousness_level (e.g., boost curiosity if persistently low).
HTNPlanner (Step 8): Potentially alter search depth or prefer simpler methods if consciousness_level is low (optional future feature).
Current State of the Script:
Functionality Implemented:
The core logic for calculating the phi_proxy_score based on differentiation and integration sub-metrics (derived from PhenomenalState inputs) is fully implemented.
The _has_self_reference check is functional.
Threshold-based determination of ConsciousState is implemented.
Configuration loading for thresholds and weights is working.
Alignment with Plans: This component is a key part of the "Φ-Proxy v1" implementation outlined in Phase I of the development checklist. It directly consumes the sub-metrics produced by ExperienceStream and applies the calculation logic described in on phi.txt.
Known Limitations/Placeholders:
Heuristic Nature: The phi_proxy_score is a heuristic approximation inspired by IIT, not a true Φ calculation. Its meaningfulness depends heavily on the quality of sub-metrics and the tuning of weights and thresholds.
Simplistic Sub-Metrics: The current assessment relies on the initial set of sub-metrics (distinct_source_count, content_diversity_lexical, shared_concept_count_gw). More advanced metrics like semantic coherence or information type diversity are not yet incorporated.
PhiCalculator Integration: The more advanced, graph-based PhiCalculator component (planned for Phase III as a research probe) is not yet integrated here.
Suggestions for Future Development/Refinement:
Incorporate More Advanced Sub-Metrics: As ExperienceStream is enhanced to calculate metrics like semantic_coherence_gw or information_type_diversity, update the CLA to incorporate these into the differentiation_score and integration_score calculations with appropriate weights.
Tune Weights and Thresholds: Extensive empirical tuning of all weights and thresholds will be necessary. This involves observing the agent's behavior under various conditions, logging the sub-metrics and phi_proxy_score, and adjusting parameters until the assessed ConsciousState meaningfully reflects perceived changes in the agent's cognitive complexity and engagement.
Dynamic Thresholds: Consider making the consciousness thresholds dynamic, perhaps influenced by long-term learning, overall agent "health" (from PerformanceOptimizer), or current task demands.
Hysteresis: Introduce hysteresis in state transitions to prevent rapid flickering between ConsciousState levels if the phi_proxy_score hovers near a threshold.
Integrate PhiCalculator (Phase III): When the research-oriented PhiCalculator component is developed, integrate its phi_value output into the final consciousness score (e.g., as a weighted component), and add telemetry for its report. This would be a significant step towards a more direct (though still simplified) IIT-based assessment.