OSCAR-C Project Documentation: Data Migration Script (migrations/v1_to_v2.py)
1. Purpose and Role in OSCAR-C
The migrations/v1_to_v2.py script is a specialized data migration utility for the OSCAR-C project. Its primary function is to facilitate the transition of the agent's persistent state from an older "Phase 1" data model to the newer "Phase 2" (and subsequent) model. The Phase 1 model is assumed to store its state primarily in a monolithic JSON file (often referred to as a "blackboard"), while the Phase 2 model relies heavily on a structured, predicate-based KnowledgeBase (implemented using SQLite) and individual JSON files for component-specific models (like DynamicSelfModel, PredictiveWorldModel).
This script is essential for users and developers who have accumulated data or trained an OSCAR-C agent using a previous version and wish to upgrade to a newer version that employs a different data storage and representation paradigm. It aims to preserve key learned information and historical data where possible, ensuring a degree of continuity and preventing complete data loss during architectural evolution.
2. Theoretical Basis and Cognitive Inspiration
While this script primarily addresses a practical software engineering challenge—data model evolution—the underlying concept of transforming and reinterpreting past experiences or knowledge into new representational frameworks has parallels with adaptive learning in biological systems. Organisms often need to recategorize or re-evaluate past information in light of new learning or developmental changes.
3. Functional Overview and Implementation
The script defines a V1ToV2Migrator class to encapsulate the transformation logic and orchestrates the migration process through an asynchronous run_migration function.
3.1. Core V1ToV2Migrator Class
Initialization: Takes an optional path for backing up the original Phase 1 data.
migrate_blackboard(blackboard_data): This is the core transformation engine.
Input: The loaded Phase 1 blackboard dictionary.
Process: It iterates through predefined sections of the Phase 1 blackboard data and maps relevant information into a list of Predicate data structures. This involves:
Current Goal: Translating the description of the current goal into an isCurrentGoal predicate.
Path Knowledge: Converting validated_paths and invalid_paths from the old self-model into isValidPath and isInvalidPath predicates, respectively.
Action History: Processing a limited number of recent actions, creating eventOccurred("actionExecution", ...) predicates for each. If an action failed and had an error message, an additional actionFailed(...) predicate is generated.
Narrative Entries: Processing a limited number of recent narrative entries, creating narrativeEntryRecorded(...) predicates with truncated content.
Reflection Events: If information about past reflections exists, it's converted into reflectionPerformed(...) predicates.
Statistics: Keeps track of the number of items migrated from each category and the total number of Predicate objects generated.
Output: Returns a dictionary containing a list of data dictionaries (each representing a Predicate to be created) and the migration statistics.
save_backup(data): Saves the original Phase 1 blackboard data to the specified backup JSON file.
verify_migration_counts(original_data, migrated_stats): Performs basic sanity checks by comparing the counts of items in the original blackboard (e.g., number of goals, paths) with the counts reported in the migration statistics, issuing warnings for discrepancies.
3.2. Main Migration Orchestration (run_migration)
This asynchronous function controls the end-to-end migration:
Dependency Check: Ensures that necessary class definitions (like Predicate and KnowledgeBase) are accessible.
Load Phase 1 Data: Reads and parses the Phase 1 blackboard JSON file.
Backup (Optional): If enabled, saves a backup of the loaded Phase 1 data.
Data Transformation: Invokes migrator.migrate_blackboard() to convert the Phase 1 data into a list of predicate representations.
Verification: Calls migrator.verify_migration_counts() to perform basic validation of the transformation. If verification fails (indicating significant potential data loss or misinterpretation), the migration aborts before modifying the target KnowledgeBase.
Populate KnowledgeBase:
Initializes a new (or connects to an existing, potentially empty) Phase 2 KnowledgeBase instance using the target SQLite database path.
Iterates through the list of predicate data generated by the transformation step.
For each data item, it reconstructs a Predicate object.
Calls KnowledgeBase.assert_fact(predicate) to insert the predicate into the new KnowledgeBase. This populates the target database with the migrated information.
Logs progress and counts of successfully asserted predicates versus any failures during assertion.
Shutdown KB: Properly closes the KnowledgeBase connection.
Return Status: Returns True if the migration process (especially the KB population) completes successfully, False otherwise.
3.3. Command-Line Interface
The script is executable from the command line and accepts arguments for:
--phase1-data: Path to the input Phase 1 blackboard JSON file.
--kb-path: Path for the output Phase 2 SQLite KnowledgeBase file.
--no-backup: A flag to disable the backup of Phase 1 data.
It uses asyncio.run() to execute the main run_migration coroutine.
3.4. Key Algorithmic Concepts
Data Transformation/Mapping: The core logic involves iterating through the nested structure of the source (Phase 1 JSON) data and mapping specific fields and lists to a flatter, predicate-based representation suitable for the target (KnowledgeBase).
JSON Parsing/Serialization: Standard Python json library usage for loading source data and saving backups.
Database Interaction: Uses the KnowledgeBase component's API (assert_fact) for populating the target SQLite database.
4. Relationship to Overall Project & Logic Flow
The migrations/v1_to_v2.py script is a standalone utility, critical for the evolution of the OSCAR-C project and for maintaining data continuity for users upgrading across major architectural versions.
Not Part of Agent Runtime: It is not executed during the normal operation of the OSCAR-C agent.
One-Time Operation (Typically): Designed to be run once when an existing OSCAR-C environment or dataset is being upgraded from a Phase 1 data model to a Phase 2 (or later) model that utilizes the KnowledgeBase.
Input: A Phase 1 blackboard.json file.
Output: A Phase 2 oscar_c_kb.db SQLite file populated with predicates derived from the Phase 1 data. Optionally, a backup of the original Phase 1 data is also created.
Impact: Allows a newer version of the OSCAR-C agent (which relies on the KnowledgeBase) to initialize with a significant amount of historical information derived from a previous version, rather than starting with an entirely empty memory. This preserves learned path knowledge, action history, and narrative context.
This migration script is a practical tool for managing the long-term development and data evolution of the OSCAR-C project, ensuring that valuable accumulated agent knowledge is not lost during significant architectural shifts.