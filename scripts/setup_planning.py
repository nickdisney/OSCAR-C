# --- START OF FILE scripts/setup_planning.py ---

"""Populate PLANNING.md with all checkboxes based on the plan."""

import os

# Define tasks based on oscar-c plan.txt structure
# This list should ideally encompass all major steps from the plan.
# Expand this list significantly based on a detailed read-through of the plan document.
TASKS = [
    # Phase 0: Bootstrap & Foundations
    "☐ 0.1 Repository Setup (Cloning, Branches)",
    "☐ 0.2 Planning Ledger Initialization (This script)",
    "☐ 0.3 Quality Guards Configuration (.pre-commit-config.yaml)",
    "☐ 0.4 Configuration Validation System (validate_config.py)",
    "☐ 0.5 Emergency Kill-Switch Script (scripts/kill_agent.sh)",

    # Phase 1: Skeleton & Interfaces
    "☐ 1.1 Package Structure Creation",
    "☐ 1.2 Core Data Structures (models/enums.py, models/datatypes.py)",
    "☐ 1.3 Component Protocols (protocols.py)",
    "☐ 1.4 Smoke Test Framework (tests/smoke/test_basic.py)",

    # Phase 2: Infrastructure Components
    "☐ 2.1 Knowledge Base Implementation (cognitive_modules/knowledge_base.py)",
    "☐ 2.2 Cognitive Cache Implementation (cognitive_modules/cognitive_cache.py)",
    "☐ 2.3 Performance Optimizer Implementation (cognitive_modules/performance_optimizer.py)",

    # Phase 3: Agent Controller & Migration (Placeholder steps, refine based on actual work)
    "☐ 3.1 Migration Scripts Implementation (oscar_c/migrations/v1_to_v2.py)",
    "☐ 3.2 Agent Controller Refactor (agent_controller.py - 12 steps)",
    "☐ 3.3 Cycle Profiler Implementation (agent_controller.py)",

    # Phase 4: Testing Framework
    "☐ 4.1 Comprehensive Integration Tests (tests/integration/test_cognitive_cycle.py)",
    "☐ 4.2 Migration Testing (tests/integration/test_migration.py)",
    # Add performance tests, unit tests setup etc.

    # Phase 5: Runtime Safety & Optimization
    "☐ 5.1 Error Recovery System (cognitive_modules/error_recovery.py)",
    "☐ 5.2 Kill Switch Implementation Enhancement (scripts/kill_agent.sh)",
    # Add any other safety features from the plan

    # Phase 6: Developer Dashboard
    "☐ 6.1 WebSocket Telemetry Server (oscar_c/telemetry_server.py - Placeholder)",
    "☐ 6.2 Dashboard Integration (web/src/... - Placeholder)",
    "☐ 6.3 Dashboard Build Configuration (web/... - Placeholder)",

    # Phase 7: Documentation & Release
    "☐ 7.1 API Documentation Generation (scripts/generate_docs.py)",
    "☐ 7.2 Comprehensive README Update (README.md)",
    "☐ 7.3 Release Script Creation (scripts/release.py)",

    # Cognitive Module Implementation (Ensure all are listed)
    "☐ CM: HTNPlanner Implementation",
    "☐ CM: AttentionController Implementation",
    "☐ CM: GlobalWorkspaceManager Implementation",
    "☐ CM: ExperienceStream Implementation",
    "☐ CM: ConsciousnessLevelAssessor Implementation",
    "☐ CM: MetaCognitiveMonitor Implementation",
    "☐ CM: LoopDetector Implementation",
    "☐ CM: PredictiveWorldModel Implementation",
    "☐ CM: DynamicSelfModel Implementation",
    "☐ CM: EmergentMotivationSystem Implementation",
    "☐ CM: NarrativeConstructor Implementation",

    # Final Integration & Testing
    "☐ FI: Agent Controller Final Integration Pass",
    "☐ FI: End-to-End Scenario Testing",
    "☐ FI: Performance Tuning & Validation",
    "☐ FI: Code Review & Cleanup",
]

def create_planning_md(output_filename="PLANNING.md"):
    """Creates or overwrites the planning markdown file."""
    # Ensure the output file is in the project root, relative to this script
    script_dir = os.path.dirname(os.path.abspath(__file__))
    project_root = os.path.dirname(script_dir)
    output_path = os.path.join(project_root, output_filename)

    try:
        with open(output_path, "w") as f:
            f.write("# OSCAR-C Phase 2 Implementation Checklist\n\n")
            f.write("*(Generated by scripts/setup_planning.py)*\n\n")
            last_phase = ""
            for task in TASKS:
                # Add phase headings based on the task prefix (e.g., "0.", "1.")
                phase_marker = task.split(" ")[1].split(".")[0]
                if phase_marker != last_phase:
                     if phase_marker.isdigit():
                         phase_title = f"Phase {phase_marker}"
                         # Add more specific titles if needed based on plan sections
                         if phase_marker == "0": phase_title += ": Bootstrap & Foundations"
                         elif phase_marker == "1": phase_title += ": Skeleton & Interfaces"
                         elif phase_marker == "2": phase_title += ": Infrastructure Components"
                         elif phase_marker == "3": phase_title += ": Agent Controller & Migration"
                         elif phase_marker == "4": phase_title += ": Testing Framework"
                         elif phase_marker == "5": phase_title += ": Runtime Safety & Optimization"
                         elif phase_marker == "6": phase_title += ": Developer Dashboard"
                         elif phase_marker == "7": phase_title += ": Documentation & Release"
                         f.write(f"\n## {phase_title}\n\n")
                     elif task.startswith("☐ CM:"):
                          if last_phase != "CM": f.write("\n## Cognitive Module Implementation\n\n")
                     elif task.startswith("☐ FI:"):
                           if last_phase != "FI": f.write("\n## Final Integration & Testing\n\n")

                     last_phase = phase_marker if phase_marker.isdigit() else task.split(":")[0].split(" ")[1]

                f.write(f"{task}\n")
        print(f"Successfully created/updated '{output_path}'")
    except IOError as e:
        print(f"Error writing to '{output_path}': {e}")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    create_planning_md()

# --- END OF FILE scripts/setup_planning.py ---